/* Copyright (c) 2017 Lancaster Software & Service
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
package com.lss.bef.core.util;

import com.lss.bef.core.util.Do;
import com.lss.bef.core.util.Sampler;

public class StringTokenizerExTest extends Sampler
{
	StringTokenizerEx	tokenizer;
	String				testString = "this is a test";
	String				delimiters = StringTokenizerEx.PROPERTY_DELIMITERS;
	
	// SETUP AND TEARDOWN
	protected void setUp()
	{
		this.tokenizer = (StringTokenizerEx)Do.instance( StringTokenizerEx.class );
		
		this.tokenizer.setString( this.testString );
	}
	
	protected void tearDown()
	{
		this.tokenizer = null;
	}
	
	
	public void sample()
	{
		if( isSample() )
		{
	  	    if( args.length < 2 )
		    {
			    System.out.println( "Usage: TestStringTokenizerEx string delimiters" );
			    return;
		    }
	  	    else
	  	    {
	  			this.tokenizer = (StringTokenizerEx)Do.instance( StringTokenizerEx.class );

	  			this.testString = args[0];
				this.delimiters = args[1];
	  	    }
		}
		// TEST/SAMPLE BODY
		this.tokenizer.setString( this.testString );
		this.tokenizer.setDelimiters( this.delimiters );
		
		System.out.println( "Printing List of Tokens - Count=" + this.tokenizer.countTokens() );
		System.out.println( "=======================" );
		
		int counter = 1;
		while( this.tokenizer.hasNext() )
		{
			  System.out.println( " Token#" + counter++ + "=" + this.tokenizer.nextToken() );
		}

		System.out.println( "=======================" );

		// ASSERTS
		if( isTest() )
		{
			assertNotNull( this.tokenizer );
		}
	}

	public void testSampler()
	{
		sample();
	}
	
	public void testChangeDelimiters()
	{
		String token = this.tokenizer.nextToken();
		
		assertEquals( token, "this" );
		assertTrue( this.tokenizer.hasNext() );

		assertEquals( this.tokenizer.countTokens(), 3 );
		
		this.tokenizer.setDelimiters( StringTokenizerEx.PROPERTY_DELIMITERS );
		assertEquals( this.tokenizer.countTokens(), 1 );
	}
	
	public void testReadTokens()
	{
		String token = this.tokenizer.nextToken();
		
		assertEquals( token, "this" );
		assertTrue( this.tokenizer.hasNext() );
		
		token = this.tokenizer.nextToken();
		assertEquals( token, "is" );
		assertTrue( this.tokenizer.hasNext() );
		
		token = this.tokenizer.nextToken();
		assertEquals( token, "a" );
		assertTrue( this.tokenizer.hasNext() );

		token = this.tokenizer.nextToken();
		assertEquals( token, "test" );
		assertFalse( this.tokenizer.hasNext() );
	}
	
	public void testReturnDelimiters()
	{
		String token = this.tokenizer.nextToken();
		
		assertEquals( token, "this" );
		assertTrue( this.tokenizer.hasNext() );

		assertEquals( this.tokenizer.countTokens(), 3 );
		
		this.tokenizer.setReturnDelimiters( true );
		assertEquals( this.tokenizer.countTokens(), 6 );
	}
	
	public void testSetDelimitersOnEmptyTokenizer()
	{
		StringTokenizerEx localTokenizer = (StringTokenizerEx)Do.instance( StringTokenizerEx.class );
		
		localTokenizer.setDelimiters( StringTokenizerEx.PROPERTY_DELIMITERS );
		
		assertEquals( localTokenizer.countTokens(), 0 );
	}

	public void testTokenCount()
	{
		int count = this.tokenizer.countTokens();
		
		assertEquals( count, 4 );
	}
	
}
